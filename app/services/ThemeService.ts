// app/services/ThemeService.ts

import Theme from '#models/theme'
import Store from '#models/store'
import { Logs } from '../controllers2/Utils/functions.js' // TODO: D√©placer
import SwarmService from '#services/SwarmService'
import RoutingService from '#services/RoutingService'
import StoreService from '#services/StoreService' // Import pour la d√©l√©guation
import env from '#start/env'
import Dockerode from 'dockerode'

interface ThemeServiceResult {
    success: boolean;
    theme?: Theme | null;
    logs: Logs;
}


class ThemeService {

    /**
     * Cr√©e/Met √† jour un th√®me en BDD et lance/met √† jour son service Swarm associ√©.
     * Rend la fonction idempotente: si le th√®me existe, lance/MAJ le service.
     */
    async createOrUpdateAndRunTheme(themeData: { /* ... (comme avant) */
        id: string; name: string; description?: string | null; docker_image_name: string;
        docker_image_tag: string; internal_port: number; source_path?: string | null;
        is_public?: boolean; is_active?: boolean; // Ajouter is_active ici
    }): Promise<ThemeServiceResult> {
        const logs = new Logs(`ThemeService.createOrUpdateAndRunTheme (${themeData.id})`);
        const themeId = themeData.id;
        const serviceName = `theme_${themeId}`;
        let theme = await Theme.find(themeId);
        let isNew = false;

        // --- 1. Cr√©er ou Merger le th√®me en BDD ---
        try {
            if (theme) {
                logs.log(`‚ÑπÔ∏è Th√®me ${themeId} existant, mise √† jour BDD...`);
                theme.merge({ // Applique les nouvelles donn√©es sauf ID
                    name: themeData.name, 
                    description: themeData.description ?? null,
                    docker_image_name: themeData.docker_image_name, 
                    docker_image_tag: themeData.docker_image_tag,
                    internal_port: themeData.internal_port,
                    source_path: themeData.source_path ?? null,
                    is_public: themeData.is_public ?? theme.is_public, // Garde ancien si non fourni
                    is_active: themeData.is_active ?? theme.is_active, // Garde ancien si non fourni
                    // is_running est g√©r√© par le lancement Swarm
                    // is_default ne doit pas √™tre modifi√© ici facilement
                });
            } else {
                logs.log(`‚ú® Cr√©ation nouveau Th√®me ${themeId} en BDD...`);
                isNew = true;
                const default_theme = await Theme.findDefault(); // Convention pour le th√®me par d√©faut
                 const isDefault = themeId ===  default_theme?.id
                 if(isDefault) {
                     if(default_theme && default_theme.id !== themeId) {
                         logs.logErrors("‚ùå Un autre th√®me est d√©j√† marqu√© par d√©faut. Corriger manuellement.");
                         return { success: false, theme:null, logs };
                     }
                 }
                theme = await Theme.create({
                    id: themeId, name: themeData.name, 
                    description: themeData.description,
                    docker_image_name: themeData.docker_image_name, 
                    docker_image_tag: themeData.docker_image_tag,
                    internal_port: themeData.internal_port, 
                    source_path: themeData.source_path,
                    is_public: themeData.is_public ?? true,
                    is_active: themeData.is_active ?? true, // Actif par d√©faut?
                    is_running: false, // Pas encore lanc√©
                    is_default: isDefault
                });
            }
            await theme.save(); // Sauvegarde apr√®s merge ou create
            logs.log(`‚úÖ Th√®me ${themeId} ${isNew ? 'cr√©√©' : 'mis √† jour'} en BDD.`);

        } catch (error) {
            logs.notifyErrors(`‚ùå Erreur ${isNew ? 'cr√©ation' : 'M√†J'} Th√®me BDD`, { themeId }, error);
            return { success: false, theme: null, logs };
        }

        // --- 2. Lancer ou Mettre √† Jour le Service Swarm ---
        let swarmOk = false;
        let finalRunningState = false;
        try {
             logs.log(`üöÄ Lancement/M√†J Service Swarm Th√®me '${serviceName}'...`);
             // V√©rifier si le th√®me doit √™tre actif pour √™tre lanc√©
             if (!theme.is_active) {
                  logs.log(`‚ÑπÔ∏è Th√®me ${themeId} marqu√© inactif (is_active=false), suppression/arr√™t du service Swarm...`);
                  // Si le service tourne, l'arr√™ter (scale 0), sinon le supprimer
                  await SwarmService.removeService(serviceName); // remove g√®re le cas inexistant
                  finalRunningState = false; // Doit √™tre non-running
                  swarmOk = true; // L'op√©ration demand√©e (ne pas le lancer) est un succ√®s
             } else {
                  // Construire la spec (comme avant)
                  const envVars = { /* ... (d√©fini comme avant) ... */
                      THEME_ID: theme.id, THEME_NAME: theme.name, HOST: '0.0.0.0',
                      PORT: theme.internal_port.toString(), NODE_ENV: env.get('NODE_ENV','development'),
                      REDIS_HOST: env.get('REDIS_HOST'), REDIS_PORT: env.get('REDIS_PORT'),
                      REDIS_PASSWORD: env.get('REDIS_PASSWORD')
                  };
                  const themeSpec = SwarmService.constructThemeServiceSpec(
                      theme.id, theme.fullImageName, 1, theme.internal_port,
                      envVars, [{Target:'sublymus_net'}]
                  );
                  const swarmService = await SwarmService.createOrUpdateService(serviceName, themeSpec);
                  swarmOk = !!swarmService;
                  finalRunningState = swarmOk; // Si l'update/create r√©ussit, il devrait √™tre running (1 replica)
             }

             // MAJ finale BDD pour is_running
             if (theme.is_running !== finalRunningState) {
                  theme.is_running = finalRunningState;
                  await theme.save();
                  logs.log(`üìä is_running Th√®me M√†J -> ${finalRunningState}`);
             }

             // MAJ Nginx SI le port interne a chang√© lors d'un update
              const currentServiceInfo = await SwarmService.inspectService(serviceName);
              const currentPort = parseInt(
                currentServiceInfo?.Spec?.TaskTemplate?.ContainerSpec?.Env?.find((e:any)=>e.startsWith("PORT="))?.split("=")[1] ?? '0');

             if(theme.is_active && currentServiceInfo && theme.internal_port !== currentPort ) {
                  logs.log(`‚ö†Ô∏è Port interne th√®me chang√© -> MAJ Nginx requise`);
                  const serverOk = await RoutingService.updateServerRouting(false);
                  const storesUsingTheme = await Store.query().where('current_theme_id', themeId);
                  let allStoresOk = true;
                  for(const store of storesUsingTheme) {
                      allStoresOk = await RoutingService.updateStoreRouting(store, false) && allStoresOk;
                  }
                  if(serverOk && allStoresOk) await RoutingService.reloadNginx(); // Reload √† la fin
                  else logs.logErrors("‚ùå √âchec MAJ Nginx partielle ou totale apr√®s changement port th√®me.");
             }

            if (!swarmOk && theme.is_active) { // Si on voulait le lancer mais √ßa a √©chou√©
                 throw new Error("√âchec cr√©ation/MAJ service Swarm th√®me.");
            }
             logs.log(`‚úÖ Op√©ration Swarm termin√©e (√©tat final running: ${finalRunningState}).`);

        } catch (error) {
             logs.notifyErrors(`‚ùå Erreur op√©ration Service Swarm Th√®me`, { themeId }, error);
             // Rollback BDD complexe si c'√©tait un update.
             // Si c'√©tait une cr√©ation, on pourrait supprimer le th√®me.
             if (isNew && theme && !theme.$isDeleted) await theme.delete();
             return { success: false, theme: null, logs };
        }

        return { success: true, theme, logs };
    }

    /**
     * Supprime un th√®me (appel d√©l√©gu√©).
     * G√®re la logique de fallback vers th√®me API ('') si force=true.
     */
    async deleteThemeAndCleanup(themeId: string, force: boolean = false): Promise<ThemeServiceResult> {
         const logs = new Logs(`ThemeService.deleteThemeAndCleanup (${themeId})`);
         const theme = await Theme.find(themeId);
         if (!theme) return { success: true, theme: null, logs: logs.log('‚ÑπÔ∏è Th√®me d√©j√† supprim√©.') };

         if (theme.is_default) return { success: false, theme, logs: logs.logErrors('‚ùå Suppression th√®me par d√©faut interdite.') };

         const serviceName = `theme_${themeId}`;
         let storesUpdateOk = true;

        // Traitement des stores affect√©s SI force=true
        if (force) {
             const storesToUpdate = await Store.query().where('current_theme_id', themeId);
             if (storesToUpdate.length > 0) {
                  logs.log(`‚ö†Ô∏è For√ßage: Fallback vers API pour ${storesToUpdate.length} store(s)...`);
                  const updatePromises = storesToUpdate.map(async (store) => {
                      // D√©l√®gue √† StoreService qui g√®re BDD+Cache+Nginx du store
                       const result = await StoreService.changeStoreTheme(store.id, null); // null -> utilise API
                       if (!result) { logs.logErrors(`   -> ‚ö†Ô∏è √âchec fallback pour store ${store.id}`); storesUpdateOk = false; }
                       else { logs.log(`   -> Store ${store.id} pass√© au th√®me API.`) }
                  });
                  await Promise.all(updatePromises);
             }
        } else {
            // V√©rification simple si non forc√©
             const count = await Store.query().where('current_theme_id', themeId).count('* as total');
             if (count[0].$extras.total > 0) {
                 logs.logErrors(`‚ùå Th√®me utilis√© par ${count[0].$extras.total} store(s). Use force=true.`);
                 return { success: false, theme, logs };
             }
        }
         if (!storesUpdateOk && force) {
            logs.logErrors("‚ùå √âchec de la mise √† jour d'au moins un store lors du fallback. Suppression annul√©e.");
             return {success: false, theme, logs};
         }

        // --- Proc√©der √† la suppression du th√®me ---
        let swarmRemoved = false;
        let themeDeleted = false;
         try {
              logs.log(`üóëÔ∏è Suppression Service Swarm '${serviceName}'...`);
              swarmRemoved = await SwarmService.removeService(serviceName);

              logs.log('üóëÔ∏è Suppression Th√®me de la BDD...');
              await theme.delete();
              themeDeleted = true;

              logs.log('üèÅ Suppression th√®me termin√©e.');
               // Nginx est mis √† jour par les appels √† StoreService.changeStoreTheme si force=true

               return { success: swarmRemoved && themeDeleted, theme: null, logs };

         } catch(error) {
              logs.notifyErrors('‚ùå Erreur durant suppression th√®me/swarm', {}, error);
              return { success: false, theme: null, logs };
         }
     }

     /** Arr√™te le service Swarm d'un th√®me (scale √† 0 et MAJ is_running). */
     async stopThemeService(themeId: string): Promise<ThemeServiceResult> {
         const logs = new Logs(`ThemeService.stopThemeService (${themeId})`);
         const theme = await Theme.find(themeId);
         if (!theme) return { success: false, theme: null, logs: logs.logErrors(`‚ùå Th√®me non trouv√©.`) };

         const serviceName = `theme_${themeId}`;
         logs.log(`üìâ Arr√™t Swarm Th√®me '${serviceName}'...`);
         const scaled = await SwarmService.scaleService(serviceName, 0);
         const newRunningState = scaled ? false : theme.is_running;

         if (scaled) {
             logs.log(`‚úÖ Service mis √† 0 r√©pliques.`);
              if(theme.is_running !== newRunningState) {
                   theme.is_running = newRunningState;
                   try { await theme.save(); logs.log(`üìä is_running Th√®me M√†J -> false`); }
                   catch(e) { logs.notifyErrors('‚ùå Erreur save apr√®s stop Swarm',{},e); }
              }
         } else { logs.logErrors(`‚ùå √âchec scale down Swarm.`); }
         return { success: scaled, theme, logs };
     }

     /** D√©marre le service Swarm d'un th√®me (scale √† 1 et MAJ is_running). */
    async startThemeService(themeId: string, replicas: number = 1): Promise<ThemeServiceResult> {
        const logs = new Logs(`ThemeService.startThemeService (${themeId} -> ${replicas})`);
         const theme = await Theme.find(themeId);
        if (!theme) return { success: false, theme: null, logs: logs.logErrors(`‚ùå Th√®me ${themeId} non trouv√©.`) };
        if (!theme.is_active) return {success: false, theme, logs: logs.logErrors(`‚ùå Th√®me ${themeId} inactif (is_active=false), d√©marrage non autoris√©.`)};
         if (replicas <= 0) return {success: false, theme, logs: logs.logErrors('‚ùå R√©pliques > 0 requis.')}
         // Si d√©j√† running ? On pourrait juste retourner true.
         if (theme.is_running && replicas === 1) return {success: true, theme, logs: logs.log("‚ÑπÔ∏è Th√®me d√©j√† running (1 replica).")}

         const serviceName = `theme_${themeId}`;
         logs.log(`üìà D√©marrage Swarm Th√®me '${serviceName}' -> ${replicas}...`);
         const scaled = await SwarmService.scaleService(serviceName, replicas);
         const newRunningState = scaled ? true : theme.is_running;

         if (scaled) {
              logs.log(`‚úÖ Service mis √† ${replicas} r√©pliques.`);
              if(theme.is_running !== newRunningState) {
                   theme.is_running = newRunningState;
                   try { await theme.save(); logs.log(`üìä is_running Th√®me M√†J -> true`); }
                   catch(e) { logs.notifyErrors('‚ùå Erreur save apr√®s start Swarm',{},e); }
              }
         } else { logs.logErrors(`‚ùå √âchec scale up Swarm.`); }
         return { success: scaled, theme, logs };
     }

    /** Red√©marre les t√¢ches du service Swarm d'un th√®me. */
    async restartThemeService(themeId: string): Promise<ThemeServiceResult> {
         const logs = new Logs(`ThemeService.restartThemeService (${themeId})`);
         const theme = await Theme.find(themeId);
         if (!theme) return { success: false, theme: null, logs: logs.logErrors(`‚ùå Th√®me ${themeId} non trouv√©.`) };

         const serviceName = `theme_${themeId}`;
          // Si on le red√©marre, il doit √™tre running ensuite
         const expectedRunningState = true;
         try {
             // (Logique restart via forceUpdate comme avant)
             const service = SwarmService.docker.getService(serviceName);
             const serviceInfo = await service.inspect(); const version = serviceInfo.Version.Index;
             await service.update({ version, Name: serviceInfo.Spec.Name, TaskTemplate: serviceInfo.Spec.TaskTemplate,
                 EndpointSpec: serviceInfo.Spec.EndpointSpec, Labels: serviceInfo.Spec.Labels, Mode: serviceInfo.Spec.Mode,
                 UpdateConfig: serviceInfo.Spec.UpdateConfig, RollbackConfig: serviceInfo.Spec.RollbackConfig,
                 TaskTemplateForceUpdate: (serviceInfo.Spec.TaskTemplate?.ForceUpdate || 0) + 1 });
             logs.log('‚úÖ Red√©marrage service Swarm demand√©.');

              // S'assure que is_running est true
              if(theme.is_running !== expectedRunningState) {
                  theme.is_running = expectedRunningState;
                  await theme.save();
                  logs.log("üìä is_running th√®me forc√© √† true apr√®s restart.")
              }
             return { success: true, theme, logs };
         } catch (error:any) { /* (gestion 404 et autres erreurs) */
              if(error.statusCode === 404) logs.logErrors(`‚ùå Service ${serviceName} non trouv√©.`);
              else logs.notifyErrors(`‚ùå Erreur demande red√©marrage Swarm`, {}, error);
              return { success: false, theme, logs };
         }
    }

    /** Met √† jour un th√®me (rolling update image tag). */
     async updateThemeVersion(themeId: string, newImageTag: string): Promise<ThemeServiceResult> {
         const logs = new Logs(`ThemeService.updateThemeVersion (${themeId} -> ${newImageTag})`);
         const theme = await Theme.find(themeId);
         if (!theme) return { success: false, theme: null, logs: logs.logErrors(`‚ùå Th√®me non trouv√©.`) };
         if (!theme.is_active) return { success: false, theme, logs: logs.logErrors("‚ùå Th√®me inactif, M√†J version non autoris√©e.")};

         const serviceName = `theme_${themeId}`;
         try {
               // (Logique Swarm update spec + service.update comme avant)
               logs.log(`üîÑ Pr√©paration M√†J Swarm '${serviceName}' -> tag ${newImageTag}...`);
                const currentServiceInfo = await SwarmService.inspectService(serviceName);
               if (!currentServiceInfo) throw new Error("Service Swarm non trouv√©.");
               const currentSpec = currentServiceInfo.Spec; const version = currentServiceInfo.Version.Index;
                const newTaskSpec: Dockerode.TaskSpec = {
                    ...currentSpec?.TaskTemplate, ContainerSpec: { ...(currentSpec?.TaskTemplate?.ContainerSpec),
                        Image: `${theme.docker_image_name}:${newImageTag}` }};
                await SwarmService.docker.getService(serviceName).update({ version, Name: currentSpec?.Name, Labels: currentSpec?.Labels,
                    Mode: currentSpec?.Mode, UpdateConfig: currentSpec?.UpdateConfig, RollbackConfig: currentSpec?.RollbackConfig,
                    EndpointSpec: currentSpec?.EndpointSpec, TaskTemplate: newTaskSpec });
               logs.log(`‚úÖ Mise √† jour Swarm demand√©e.`);

               // MAJ BDD
                theme.docker_image_tag = newImageTag;
                // S'assure is_running = true
                if(!theme.is_running) theme.is_running = true;
                await theme.save();
                logs.log(`‚úÖ Tag image & is_running M√†J BDD: ${newImageTag}.`);

               return { success: true, theme, logs };

          } catch(error) {
               logs.notifyErrors(`‚ùå Erreur M√†J version th√®me`, { themeId, newImageTag }, error);
                // Si Swarm a √©chou√© mais la BDD √©tait OK avant, on ne touche pas la BDD? Ou on remet is_running?
                return { success: false, theme, logs };
          }
     }

     /** Active ou d√©sactive un th√®me globalement. */
    async setThemeActiveStatus(themeId: string, isActive: boolean): Promise<ThemeServiceResult> {
        const logs = new Logs(`ThemeService.setThemeActiveStatus (${themeId} -> ${isActive})`);
        const theme = await Theme.find(themeId);
        if (!theme) return { success: false, theme: null, logs: logs.logErrors(`‚ùå Th√®me ${themeId} non trouv√©.`) };

         if (theme.is_default && !isActive) return { success: false, theme, logs: logs.logErrors("‚ùå D√©sactivation th√®me par d√©faut interdite.") };

         if(theme.is_active === isActive) return { success: true, theme, logs: logs.log("‚ÑπÔ∏è Th√®me d√©j√† dans cet √©tat actif.")};

         theme.is_active = isActive;
         try {
             await theme.save();
              logs.log(`‚úÖ Statut is_active Th√®me ${themeId} mis √† jour: ${isActive}.`);

             // Si on d√©sactive, il faut aussi arr√™ter le service Swarm associ√© !
             if (!isActive) {
                  logs.log("   -> Th√®me d√©sactiv√©, arr√™t du service Swarm...");
                  await this.stopThemeService(themeId); // Appelle la m√©thode qui g√®re scale 0 + is_running
             } else {
                 // Si on active, faut-il d√©marrer le service? Pas forc√©ment, il d√©marrera peut-√™tre
                 // seulement si un store l'utilise ou si l'admin le fait explicitement. Laissons
                 // startThemeService pour un d√©marrage explicite.
             }
             return { success: true, theme, logs };
         } catch (error) {
              logs.notifyErrors(`‚ùå Erreur sauvegarde/arr√™t lors de changement is_active`, {}, error);
              return { success: false, theme, logs };
         }
    }
}

export default new ThemeService();