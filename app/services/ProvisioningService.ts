// app/services/ProvisioningService.ts

import { Logs } from '../controllers2/Utils/functions.js' // Gardons Logs
import { serviceNameSpace } from '../controllers2/Utils/functions.js'
import env from '#start/env'
import { execa, type ExecaError } from 'execa' // On aura toujours besoin d'execa pour les commandes syst√®me
import Store from '#models/store'
import fs from 'fs/promises'

// Helper pour v√©rifier si une erreur execa est "already exists" ou similaire
function isAlreadyExistsError(error: any): boolean {
  if (error instanceof Error && 'stderr' in error) {
    const stderr:any = (error as ExecaError).stderr||[];
    return stderr.includes('already exists') || stderr.includes('existe d√©j√†');
  }
  return false;
}

// Helper pour cr√©er un r√©pertoire s'il n'existe pas
async function ensureDirectoryExists(path: string): Promise<boolean> {
  try {
    await fs.stat(path);
    return true; // Existe d√©j√†
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      try {
        await fs.mkdir(path, { recursive: true }); // Cr√©er r√©cursivement
        return true; // Cr√©√© avec succ√®s
      } catch (mkdirError) {
        return false; // √âchec de la cr√©ation
      }
    }
    return false; // Autre erreur stat
  }
}

class ProvisioningService {

  /**
   * Provisionne l'infrastructure syst√®me pour un store :
   * User Linux, Group Linux, Volume Directory, Base de donn√©es PG, User PG.
   * Con√ßu pour √™tre idempotent.
   *
   * @param store L'objet Store pour lequel provisionner.
   * @returns boolean Indique si le provisioning a r√©ussi globalement.
   */
  async provisionStoreInfrastructure(store: Store): Promise<boolean> {
    const logs = new Logs(`ProvisioningService.provisionStoreInfrastructure (${store.id})`);
    const { USER_NAME, GROUPE_NAME, DB_DATABASE, DB_PASSWORD } = serviceNameSpace(store.id);
 
    let success = true;

    // --- 1. User et Groupe Linux ---
    try {
      logs.log(`‚öôÔ∏è V√©rification/Cr√©ation Groupe Linux: ${GROUPE_NAME}...`);
      await execa('sudo', ['groupadd', GROUPE_NAME]);
      logs.log(`‚úÖ Groupe Linux ${GROUPE_NAME} OK.`);
    } catch (error: any) {
      if (!isAlreadyExistsError(error)) {
        logs.notifyErrors(`‚ùå Erreur lors de la cr√©ation du groupe ${GROUPE_NAME}`, {}, error);
        success = false;
      } else {
         logs.log(`üëç Groupe Linux ${GROUPE_NAME} existe d√©j√†.`);
      }
    }

    try {
      logs.log(`‚öôÔ∏è V√©rification/Cr√©ation User Linux: ${USER_NAME}...`);
      // --disabled-password cr√©e un user sans mot de passe utilisable pour login direct
      // --gecos "" √©vite les questions interactives
      // -g sp√©cifie le groupe principal lors de la cr√©ation
      await execa('sudo', ['adduser', '--disabled-password', '--gecos', '""', '--ingroup', GROUPE_NAME, USER_NAME]);
      logs.log(`‚úÖ User Linux ${USER_NAME} OK (dans groupe ${GROUPE_NAME}).`);
    } catch (error: any) {
      if (!isAlreadyExistsError(error)) {
        logs.notifyErrors(`‚ùå Erreur lors de la cr√©ation de l'utilisateur ${USER_NAME}`, {}, error);
        success = false;
      } else {
         logs.log(`üëç User Linux ${USER_NAME} existe d√©j√†.`);
         //TODO Assurer qu'il est bien dans le groupe principal (si adduser seul ne suffit pas)
         try {
             await execa('sudo', ['usermod', '-g', GROUPE_NAME, USER_NAME]);
             logs.log(`   -> Appartenance principale au groupe ${GROUPE_NAME} v√©rifi√©e.`);
         } catch(usermodError) {
             logs.notifyErrors(`   -> ‚ö†Ô∏è Erreur v√©rification groupe principal ${USER_NAME}`, {}, usermodError);
         }
      }
    }

    // On ne met PAS userRunningApp ('opus-ub') dans le groupe g_STOREID

    // --- 2. R√©pertoire Volume ---
    const sApiVolumeBase = env.get('S_API_VOLUME_SOURCE', '/volumes/api');
    const storeVolumePath = `${sApiVolumeBase}/${store.id}`; // Le chemin complet du volume pour CE store
    
    try {
        logs.log(`‚öôÔ∏è V√©rification/Cr√©ation R√©pertoire Volume: ${storeVolumePath}...`);
        const dirExists = await ensureDirectoryExists(storeVolumePath);
        if (!dirExists) throw new Error("√âchec de la cr√©ation du r√©pertoire");

        logs.log(`   -> Attribution propri√©taire ${USER_NAME}...`);
        await execa('sudo', ['chown', `${USER_NAME}:${GROUPE_NAME}`, storeVolumePath]);
        logs.log(`   -> Attribution permissions 770...`); // 770: User(rwx), Group(rwx), Other(---)
        await execa('sudo', ['chmod', '770', storeVolumePath]);
        logs.log(`‚úÖ R√©pertoire Volume ${storeVolumePath} OK.`);
    } catch(error) {
         logs.notifyErrors(`‚ùå Erreur lors de la configuration du r√©pertoire Volume ${storeVolumePath}`, {}, error);
         success = false;
    }

    // --- 3. Base de donn√©es et User PostgreSQL ---
    const dbHost = env.get('DB_HOST', '127.0.0.1');
    const dbAdminUser = 'postgres'; // Ou l'utilisateur ayant les droits de cr√©er des DB/Users PG

    try {
        logs.log(`‚öôÔ∏è V√©rification connexion PostgreSQL sur ${dbHost}...`);
        await execa('pg_isready', ['-U', dbAdminUser]); // Tester avec l'utilisateur admin
        logs.log(`‚úÖ Connexion PostgreSQL OK.`);
    } catch(error) {
         logs.notifyErrors('‚ùå PostgreSQL n\'est pas disponible ou accessible', {host: dbHost, user: dbAdminUser}, error);
        return false; // Erreur bloquante
    }

    try {
        logs.log(`‚öôÔ∏è V√©rification/Cr√©ation User PostgreSQL: ${USER_NAME}...`);
        // TODO Attention √† l'injection SQL ! Utiliser des requ√™tes param√©tr√©es si possible via un client PG.
        // Avec execa, il faut √™tre prudent avec les guillemets. '' pour le mot de passe.
        await execa('sudo', ['-u', dbAdminUser, 'psql', '-c', `CREATE USER "${USER_NAME}" WITH PASSWORD '${DB_PASSWORD}';`]);
        logs.log(`‚úÖ User PostgreSQL ${USER_NAME} OK.`);
    } catch (error: any) {
        if (error.stderr?.toLowerCase().includes('already exists')) {
             logs.log(`üëç User PostgreSQL ${USER_NAME} existe d√©j√†.`);
             // TODO: Mettre √† jour le mot de passe ? ALTER USER ... PASSWORD ...
        } else {
            logs.notifyErrors(`‚ùå Erreur cr√©ation User PostgreSQL ${USER_NAME}`, {}, error);
            success = false;
        }
    }

    try {
        logs.log(`‚öôÔ∏è V√©rification/Cr√©ation Database PostgreSQL: ${DB_DATABASE}...`);
        // Cr√©e la DB et assigne le propri√©taire cr√©√© juste avant
        await execa('sudo', ['-u', dbAdminUser, 'psql', '-c', `CREATE DATABASE "${DB_DATABASE}" OWNER "${USER_NAME}";`]);
        logs.log(`‚úÖ Database PostgreSQL ${DB_DATABASE} OK.`);
    } catch (error: any) {
        if (error.stderr?.toLowerCase().includes('already exists')) {
             logs.log(`üëç Database PostgreSQL ${DB_DATABASE} existe d√©j√†.`);
             // TODO: V√©rifier/corriger le propri√©taire ? ALTER DATABASE ... OWNER TO ...
        } else {
             logs.notifyErrors(`‚ùå Erreur cr√©ation Database PostgreSQL ${DB_DATABASE}`, {}, error);
             success = false;
        }
    }

    // Pas besoin de GRANT ALL PRIVILEGES si l'utilisateur est OWNER de la DB. Il a d√©j√† tous les droits.

    return success;
  }


  /**
   * D√©provisionne l'infrastructure syst√®me pour un store :
   * User Linux, Group Linux, Volume Directory, Base de donn√©es PG, User PG.
   * Tente de nettoyer m√™me si des √©tapes √©chouent.
   *
   * @param store L'objet Store pour lequel d√©provisionner.
   * @returns boolean Indique si toutes les √©tapes de nettoyage ont (apparemment) r√©ussi.
   */
  async deprovisionStoreInfrastructure(store: Store): Promise<boolean> {
    const logs = new Logs(`ProvisioningService.deprovisionStoreInfrastructure (${store.id})`);
    const { USER_NAME, GROUPE_NAME, DB_DATABASE } = serviceNameSpace(store.id);
    const dbHost = env.get('DB_HOST', '127.0.0.1');
    const dbAdminUser = 'postgres';
    let success = true;

    const sApiVolumeBase = env.get('S_API_VOLUME_SOURCE', '/volumes/api');
    const storeVolumePath = `${sApiVolumeBase}/${store.id}`; // Coh√©rence avec provision

    // --- 1. Base de donn√©es et User PostgreSQL ---
    // Il faut DROPER la DB avant de DROPER l'utilisateur propri√©taire
    try {
        logs.log(`üóëÔ∏è Suppression Database PostgreSQL: ${DB_DATABASE}...`);
        // S'assurer qu'aucune connexion n'est active est crucial !
        // On peut forcer la d√©connexion des utilisateurs
         await execa('sudo', ['-u', dbAdminUser, 'psql', '-c', `SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${DB_DATABASE}';`], { reject: false }); // Tente de terminer les backends, ignore l'erreur si la DB n'existe pas
        await execa('sudo', ['-u', dbAdminUser, 'psql', '-c', `DROP DATABASE IF EXISTS "${DB_DATABASE}";`]);
        logs.log(`‚úÖ Database PostgreSQL ${DB_DATABASE} supprim√©e (si existante).`);
    } catch (error: any) {
        logs.notifyErrors(`‚ùå Erreur suppression Database PostgreSQL ${DB_DATABASE}`, {}, error);
        success = false; // Peut emp√™cher la suppression de l'user PG
    }

    try {
        logs.log(`üóëÔ∏è Suppression User PostgreSQL: ${USER_NAME}...`);
        await execa('sudo', ['-u', dbAdminUser, 'psql', '-c', `DROP USER IF EXISTS "${USER_NAME}";`]);
        logs.log(`‚úÖ User PostgreSQL ${USER_NAME} supprim√© (si existant).`);
    } catch (error: any) {
        logs.notifyErrors(`‚ùå Erreur suppression User PostgreSQL ${USER_NAME}`, {}, error);
        success = false;
    }

    // --- 2. R√©pertoire Volume ---
    try {
        logs.log(`üóëÔ∏è Suppression R√©pertoire Volume: ${storeVolumePath}...`);
        await execa('sudo', ['rm', '-rf', storeVolumePath]);
        logs.log(`‚úÖ R√©pertoire Volume ${storeVolumePath} supprim√©.`);
    } catch (error) {
        logs.notifyErrors(`‚ùå Erreur suppression R√©pertoire Volume ${storeVolumePath}`, {}, error);
        success = false;
    }

    // --- 3. User et Groupe Linux ---
    // Supprimer l'utilisateur d'abord, puis le groupe (s'il est vide)
    try {
        logs.log(`üóëÔ∏è Suppression User Linux: ${USER_NAME}...`);
        // -r supprime aussi le home directory (pas cr√©√© ici, mais bonne pratique)
        // -f force m√™me si l'utilisateur est connect√© (peu probable)
        await execa('sudo', ['userdel', '-rf', USER_NAME]);
        logs.log(`‚úÖ User Linux ${USER_NAME} supprim√©.`);
    } catch (error) {
         // Peut √©chouer si l'user n'existe pas, c'est ok
        if (! (error instanceof Error && 'stderr' in error && (error as any).stderr?.includes('does not exist'))) {
            logs.notifyErrors(`‚ùå Erreur suppression User Linux ${USER_NAME}`, {}, error);
            success = false;
        }
    }

    try {
        logs.log(`üóëÔ∏è Suppression Groupe Linux: ${GROUPE_NAME}...`);
        // Ne supprime que si le groupe est vide
        await execa('sudo', ['groupdel', GROUPE_NAME]);
        logs.log(`‚úÖ Groupe Linux ${GROUPE_NAME} supprim√© (s'il √©tait vide).`);
    } catch (error) {
         // Peut √©chouer si le groupe n'existe pas ou n'est pas vide, c'est ok dans ce flux
        if (! (error instanceof Error && 'stderr' in error && ((error as any).stderr?.includes('does not exist') || (error as any).stderr?.includes('is not empty')) )) {
            logs.notifyErrors(`‚ùå Erreur suppression Groupe Linux ${GROUPE_NAME}`, {}, error);
            success = false;
        }
    }

    // Pas besoin d'utiliser delete_users.sh, on le fait directement.

    return success;
  }

}

// Exporte une instance unique
export default new ProvisioningService()